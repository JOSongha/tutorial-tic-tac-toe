{"ast":null,"code":"var _jsxFileName = \"/home/josh02/InfoVis/Asgmt0/tutorial-tic-tac-toe/src/App.js\",\n  _s = $RefreshSig$();\n// import logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\n\n/*\nSquare component: Renders a single button\nprops:\n- value: The value to be displayed inside the button (e.g., \"X\", \"O\", or null)\n- onSquareClick: Function to be called when the button is clicked\n*/\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n\n/*\nBoard component: Manages the state and logic for the Tic-Tac-Toe game\nprops:\n- xIsNext: A boolean indicating if the next move is for player 'X' (true) or 'O' (false)\n- squares: An array representing the current state of the board (each index is either 'X', 'O', or null)\n- onPlay: A function to update the state after a move is made\n*/\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay\n}) {\n  // Handles the logic when a square is clicked\n  // - i: The index of the clicked square\n  function handleClick(i) {\n    // Return early if there's already a winner or if the square is already occupied\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    // Create a copy of the squares array to update the board state\n    const nextSquares = squares.slice();\n\n    // Update the square with 'X' if it's player 'X's turn, otherwise 'O'\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n\n    // Pass the updated board state back to the parent component through the onPlay function\n    onPlay(nextSquares);\n  }\n\n  // Determine if there's a winner\n  const winner = calculateWinner(squares);\n  // Define the game status: either the winner or the next player's turn\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  // Render the Tic-Tac-Toe board with 9 squares & the predefined game status\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n/*\nGame component: The main component that manages the entire state of the Tic-Tac-Toe game.\nfunctions:\n- Track the game history & current move\n- Provides functionality to handle gameplay and time travel\n*/\n_c2 = Board;\nexport default function Game() {\n  _s();\n  // State for storing the history of moves as an array of arrays. Each array represents a board state.\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  // State for tracking the index of the current move in the game history.\n  const [currentMove, setCurrentMove] = useState(0);\n\n  // A boolean indicating whether the next move is by player 'X'. It is true if the move number is even.\n  const xIsNext = currentMove % 2 === 0;\n\n  // The current state of the board, which is based on the move number from the history.\n  const currentSquares = history[currentMove];\n\n  // handlePlay function: Updates the game state after a move is made.\n  // - nextSquares: The updated array representing the new board state after a move.\n  function handlePlay(nextSquares) {\n    // Creates a new history that includes only the moves up to the current move and the new board state.\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\n    // Updates the history state with the new board state and sets the current move to the latest move.\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  // jumpTo function: Allows the player to \"jump\" back to a previous move in the history.\n  // - nextMove: The move number to jump to.\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  // Generate a list of buttons that allow the player to travel through game history.\n  // Each button displays a description of the move number.\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this);\n  });\n\n  // Render the Game component with two sections: the game board and the move history.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n/*\ncalculateWinner function: Determines if there is a winning line in the current state of the Tic-Tac-Toe board.\n- squares: An array of 9 elements representing the current state of the board, where 'X', 'O', or null values can be present.\n*/\n_s(Game, \"xZZdy1/aP1agxyjHn6CL01lXnXc=\");\n_c3 = Game;\nfunction calculateWinner(squares) {\n  // Array of possible winning lines. Each sub-array represents a set of indices in the squares array\n  // that form a winning combination (either a row, column, or diagonal).\n  const lines = [[0, 1, 2],\n  // Top row\n  [3, 4, 5],\n  // Middle row\n  [6, 7, 8],\n  // Bottom row\n  [0, 3, 6],\n  // Left column\n  [1, 4, 7],\n  // Middle column\n  [2, 5, 8],\n  // Right column\n  [0, 4, 8],\n  // Diagonal from top-left to bottom-right\n  [2, 4, 6] // Diagonal from top-right to bottom-left\n  ];\n\n  // Iterate through each possible winning line.\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i]; // Destructure the indices for the current winning line.\n\n    // Check if the squares at these indices are non-null and contain the same value ('X' or 'O').\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","winner","status","_c2","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","handlePlay","nextHistory","length","jumpTo","nextMove","moves","map","move","description","_c3","lines","a","b","c","$RefreshReg$"],"sources":["/home/josh02/InfoVis/Asgmt0/tutorial-tic-tac-toe/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\n\n/*\nSquare component: Renders a single button\nprops:\n- value: The value to be displayed inside the button (e.g., \"X\", \"O\", or null)\n- onSquareClick: Function to be called when the button is clicked\n*/\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\n/*\nBoard component: Manages the state and logic for the Tic-Tac-Toe game\nprops:\n- xIsNext: A boolean indicating if the next move is for player 'X' (true) or 'O' (false)\n- squares: An array representing the current state of the board (each index is either 'X', 'O', or null)\n- onPlay: A function to update the state after a move is made\n*/\nfunction Board({ xIsNext, squares, onPlay }) {\n  // Handles the logic when a square is clicked\n  // - i: The index of the clicked square\n  function handleClick(i) {\n    // Return early if there's already a winner or if the square is already occupied\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    // Create a copy of the squares array to update the board state\n    const nextSquares = squares.slice();\n\n    // Update the square with 'X' if it's player 'X's turn, otherwise 'O'\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n\n    // Pass the updated board state back to the parent component through the onPlay function\n    onPlay(nextSquares);\n  }\n\n  // Determine if there's a winner\n  const winner = calculateWinner(squares);\n  // Define the game status: either the winner or the next player's turn\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  // Render the Tic-Tac-Toe board with 9 squares & the predefined game status\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n}\n\n/*\nGame component: The main component that manages the entire state of the Tic-Tac-Toe game.\nfunctions:\n- Track the game history & current move\n- Provides functionality to handle gameplay and time travel\n*/\nexport default function Game() {\n  // State for storing the history of moves as an array of arrays. Each array represents a board state.\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  // State for tracking the index of the current move in the game history.\n  const [currentMove, setCurrentMove] = useState(0);\n\n  // A boolean indicating whether the next move is by player 'X'. It is true if the move number is even.\n  const xIsNext = currentMove % 2 === 0;\n  \n  // The current state of the board, which is based on the move number from the history.\n  const currentSquares = history[currentMove];\n\n  // handlePlay function: Updates the game state after a move is made.\n  // - nextSquares: The updated array representing the new board state after a move.\n  function handlePlay(nextSquares) {\n    // Creates a new history that includes only the moves up to the current move and the new board state.\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\n    // Updates the history state with the new board state and sets the current move to the latest move.\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  // jumpTo function: Allows the player to \"jump\" back to a previous move in the history.\n  // - nextMove: The move number to jump to.\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  // Generate a list of buttons that allow the player to travel through game history.\n  // Each button displays a description of the move number.\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  // Render the Game component with two sections: the game board and the move history.\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\n/*\ncalculateWinner function: Determines if there is a winning line in the current state of the Tic-Tac-Toe board.\n- squares: An array of 9 elements representing the current state of the board, where 'X', 'O', or null values can be present.\n*/\nfunction calculateWinner(squares) {\n  // Array of possible winning lines. Each sub-array represents a set of indices in the squares array\n  // that form a winning combination (either a row, column, or diagonal).\n  const lines = [\n    [0, 1, 2], // Top row\n    [3, 4, 5], // Middle row\n    [6, 7, 8], // Bottom row\n    [0, 3, 6], // Left column\n    [1, 4, 7], // Middle column\n    [2, 5, 8], // Right column\n    [0, 4, 8], // Diagonal from top-left to bottom-right\n    [2, 4, 6]  // Diagonal from top-right to bottom-left\n  ];\n\n  // Iterate through each possible winning line.\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];   // Destructure the indices for the current winning line.\n\n    // Check if the squares at these indices are non-null and contain the same value ('X' or 'O').\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}